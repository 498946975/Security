import umsgpack
import hmac
from hashlib import sha256
from Crypto.Cipher import AES
import os


# 对数据进行签名
def sign_data(data, secret_key):
    signature = hmac.new(secret_key, data, sha256).digest()
    return signature + data


# 对数据进行加密
def encrypt_data(data, key):
    cipher = AES.new(key, AES.MODE_EAX)
    ciphertext, tag = cipher.encrypt_and_digest(data)
    return cipher.nonce + tag + ciphertext


# 对数据进行解密和验证
def decrypt_and_verify_data(data, key):
    nonce = data[:16]
    tag = data[16:32]
    ciphertext = data[32:]
    cipher = AES.new(key, AES.MODE_EAX, nonce)
    plaintext = cipher.decrypt_and_verify(ciphertext, tag)
    return plaintext


# 加载密钥
secret_key = os.urandom(32)
secret_key_b = b'\xab\x7fAy\r)\x18\xc1\xe5\xfe\x97\xfb\xf0!1\xfa$\xbf\x8f5l\xf2\xf8\xfa\xfc\x15\xf6\xc3\xa4\xa3\x85\xac'
# 序列化数据并签名、加密
data = {'name': 'Alice', 'age': 25}
packed_data = umsgpack.dumps(data)
signed_data = sign_data(packed_data, secret_key)
encrypted_data = encrypt_data(signed_data, secret_key)

# 传输和存储加密后的数据

# 接收和解密数据，并验证签名
received_data = decrypt_and_verify_data(encrypted_data, secret_key)
signature = received_data[:32]
packed_data = received_data[32:]
if hmac.compare_digest(signature, hmac.new(secret_key, packed_data, sha256).digest()):
    # 签名验证通过，进行反序列化
    data = umsgpack.loads(packed_data)
    print(data)
else:
    # 签名验证失败，数据可能被篡改
    print('Invalid signature')
